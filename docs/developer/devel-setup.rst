####################################
Setting up a development environment
####################################

.. contents::

Some steps described here overlap the ones described in the
`installation instructions <../admin/installation.rst>`__.

Step 0: Dependencies
====================

Follow the corresponding section from the
`installation instructions <../admin/installation.rst>`__. Make sure to also
install *composer* as specified there.

Additionally, a development environment may need the following dependencies to
generate minified versions of the JS code and the documentation pages:

* Fedora: packages ``uglify-js`` and ``python3-docutils``.
* Debian/Ubuntu: packages ``uglifyjs`` and ``python3-docutils``.

NOTICE: UglifyJS version must be 3.15 or above.

Step 1: Setting up the database
===============================

Follow the corresponding section from the
`installation instructions <../admin/installation.rst>`__.

Step 2: Setting up the files
============================

Clone the PhpReport repository ``https://github.com/Igalia/phpreport`` in a
location available to the web server. The usual default location for the
Apache web server is: ``/var/www/html/``

Alternatively, clone it elsewhere and create a link from the web server
directory.

You must also run ``composer dump-autoload -o`` inside PhpReport root directory,
so it can generate the autoload files. Then, run ``composer install`` to install
the project dependencies.

Step 3: Creating the schema and initial data of the database
============================================================

The configuration file with the default values already exists in the repository,
so you don't have to touch it unless you changed any data in the first step.

Then, you can follow the step three in the
`installation instructions <../admin/installation.rst>`__ (either the manual or
the wizard setup) to create the schema and initial data.

Step 4: Setup autogenerated files
=================================

Create the documentation files with ``make help``.

You can optionally minify the JS source with ``make minify``.
You should be able to debug it because there are source map files
in place, but take into account you would have to re-generate them with
``make minify`` every time you modify a ``.js`` file.
In a development environment, it's probably better not to minify the sources.

Step 5: Try the application
===========================

Use a browser to open the correct URL of your web server (very likely,
``http://localhost/phpreport``), then use the user name ``admin`` and the
password ``admin`` to try a user with full privileges, or ``user`` with
password ``user`` to try a login with restricted permissions. You will also be
able to create users with any permission level once you are logged in as
``admin``.

Step 6: Running automated tests
===============================

There 2 types of tests in the project: unit and integration tests.

The unit tests will work locally without issues, but the integration
tests will only work if there is a service running on the port 8000
with the data from the `sql/initialData.sql` file. In that case it's
easier to run it with docker, as it has everything setup.

In one terminal build and run the application and the database:

``docker-compose -f docker/docker-compose.test.yml up --build --renew-anon-volumes``

In a second terminal run the ``test`` container to run the tests:

``docker-compose -f docker/docker-compose.test.yml run -T test``

If you don't want to setup docker, it's possible to run only the
unit tests. Make sure you have composer and the projects dependencies installed.
To install the dependencies run ``composer install`` in the project
root directory.

All the automated tests should be placed inside the ``tests`` directory.
From the project root, run ``./vendor/bin/phpunit --testdox tests/unit``
to execute the automated tests.
