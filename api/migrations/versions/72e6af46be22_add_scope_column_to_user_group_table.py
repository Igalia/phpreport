"""Add scope column to user group table

Revision ID: 72e6af46be22
Revises: 8c480b641f22
Create Date: 2023-11-06 12:23:06.476645

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "72e6af46be22"
down_revision = "8c480b641f22"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("user_group", sa.Column("scopes", sa.String, nullable=True))
    # Check to see if the roles exist; if not, add them
    conn = op.get_bind()
    insert_staff_role = sa.text(f"INSERT into user_group(name) select 'staff' WHERE NOT EXISTS (SELECT id from user_group WHERE name = 'staff');")
    conn.execute(insert_staff_role)
    insert_manager_role = sa.text(f"INSERT into user_group(name) select 'manager' WHERE NOT EXISTS (SELECT id from user_group WHERE name = 'manager');")
    conn.execute(insert_manager_role)
    insert_admin_role = sa.text(f"INSERT into user_group(name) select 'admin' WHERE NOT EXISTS (SELECT id from user_group WHERE name = 'admin');")
    conn.execute(insert_admin_role)
    insert_hr_role = sa.text(f"INSERT into user_group(name) select 'human resources' WHERE NOT EXISTS (SELECT id from user_group WHERE name = 'human resources');")
    conn.execute(insert_hr_role)
    insert_pm_role = sa.text(f"INSERT into user_group(name) select 'project manager' WHERE NOT EXISTS (SELECT id from user_group WHERE name = 'project manager');")
    conn.execute(insert_pm_role)
    # Add scopes for default roles
    separator = ","
    scopes_everyone_has = "task:create-own,task:read-own,task:update-own,task:delete-own,task_type:read,template:create-own,template:update-own,template:read-own,template:read-global,template:delete-own,project:read-assigned,vacation:read-own,vacation:read-other,vacation:create-own,vacation:update-own,vacation:delete-own"
    hr_only_scopes = "long_leave:create,long_leave:update,long_leave:delete,user_capacity:create,user_capacity:update,user_capacity:delete"
    hr_scopes = separator.join((scopes_everyone_has, hr_only_scopes))
    pm_only_scopes = "project:create,project:update-own,project:delete-own,project:read-own,project:read-assigned,project:read-other,client:create,client:update,client:delete,client:read,project_status:read"
    pm_scopes = separator.join((scopes_everyone_has, pm_only_scopes))
    manager_only_scopes = (
        "template:create-global,template:update-global,template:delete-global"
    )
    manager_scopes = separator.join(
        (scopes_everyone_has, hr_only_scopes, pm_only_scopes, manager_only_scopes)
    )
    admin_only_scopes = "task_type:create,task_type:update,task_type:delete,config:update,project_status:create,project_status:update,project_status:delete"
    admin_scopes = separator.join(
        (
            scopes_everyone_has,
            pm_only_scopes,
            hr_only_scopes,
            manager_only_scopes,
            admin_only_scopes,
        )
    )

    staff_query = sa.text(
        f"UPDATE user_group SET scopes = '{scopes_everyone_has}' WHERE name = 'staff'"
    )
    conn.execute(staff_query)
    pm_query = sa.text(
        f"UPDATE user_group SET scopes = '{pm_scopes}' WHERE name = 'project manager'"
    )
    conn.execute(pm_query)
    hr_query = sa.text(
        f"UPDATE user_group SET scopes = '{hr_scopes}' WHERE name = 'human resources'"
    )
    conn.execute(hr_query)
    manager_query = sa.text(
        f"UPDATE user_group SET scopes = '{manager_scopes}' WHERE name = 'manager'"
    )
    conn.execute(manager_query)
    admin_query = sa.text(
        f"UPDATE user_group SET scopes = '{admin_scopes}' WHERE name = 'admin'"
    )
    conn.execute(admin_query)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("user_group", "scopes")
    # ### end Alembic commands ###
